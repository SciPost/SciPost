import datetime
from django.utils import timezone
from django.shortcuts import get_object_or_404, render
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.models import User
from django.core.mail import send_mail
from django.core.urlresolvers import reverse
from django.http import HttpResponseRedirect
from django.views.decorators.csrf import csrf_protect
from django.db.models import Avg

from .models import Contributor, SciPostPublication, Commentary, Comment, CommentRating, InvitedReport
from .forms import RegistrationForm, VetRegistrationForm, AuthenticationForm, InitiateCommentaryForm, VetCommentaryForm, CommentarySearchForm, CommentForm, VetCommentForm, CommentRatingForm

def index(request):
    return render(request, 'scipost/index.html')

def about(request):
    return render(request, 'scipost/about.html')

def register(request):
    # If POST, process the form data
    if request.method == 'POST':
        # create a form instance and populate it with the form data
        form = RegistrationForm(request.POST)
        # check whether it's valid
        if form.is_valid():
            # create the user
            user = User.objects.create_user (
                first_name = form.cleaned_data['first_name'],
                last_name = form.cleaned_data['last_name'],
                email = form.cleaned_data['email'],
                username = form.cleaned_data['username'],
                password = form.cleaned_data['password']
                )
            contributor = Contributor (
                user=user, 
                affiliation = form.cleaned_data['affiliation'],
                personalwebpage = form.cleaned_data['personalwebpage'],
                )
            contributor.save()
            return HttpResponseRedirect('thanks_for_registering')
    # if GET or other method, create a blank form
    else:
        form = RegistrationForm()

    return render(request, 'scipost/register.html', {'form': form})


def thanks_for_registering(request):
    return render(request, 'scipost/thanks_for_registering.html')


def login_view(request):
    if request.method == 'POST':
        username = request.POST['username']
        password = request.POST['password']
        user = authenticate(username=username, password=password)
        if user is not None:
            if user.is_active:
                login(request, user)
                contributor = Contributor.objects.get(user=request.user)
                context = {'contributor': contributor }
                return render(request, 'scipost/personal_page.html', context)
            else:
                return render(request, 'scipost/disabled_account.html')
        else:
            return render(request, 'scipost/login_error.html')
    else:
        form = AuthenticationForm()
        return render(request, 'scipost/login.html', {'form': form})

@csrf_protect
def logout_view(request):
    logout(request)
    return render(request, 'scipost/logout.html')

@csrf_protect
def personal_page(request):
    if request.user.is_authenticated():
        contributor = Contributor.objects.get(user=request.user)
        context = {'contributor': contributor}
        return render(request, 'scipost/personal_page.html', context)
    else:
        return render(request, 'scipost/login.html')

@csrf_protect
def journals(request):
    return render(request, 'scipost/journals.html')


@csrf_protect
def initiate_commentary(request):
    # If POST, process the form data
    if request.method == 'POST':
        form = InitiateCommentaryForm(request.POST)
        if form.is_valid():
            contributor = Contributor.objects.get(user=request.user)
            status = 0
            if contributor.rank >= 2:
                status = 1 # editors and above don't require comment vetting
            commentary = Commentary (
                status = status,
                pub_title = form.cleaned_data['pub_title'],
                pub_DOI_link = form.cleaned_data['pub_DOI_link'],
                author_list = form.cleaned_data['author_list'],
                pub_date = form.cleaned_data['pub_date'],
                pub_abstract = form.cleaned_data['pub_abstract']
                )
            commentary.save()
            return HttpResponseRedirect('initiate_commentary_ack')
    else:
        form = InitiateCommentaryForm()

    return render(request, 'scipost/initiate_commentary.html', {'form': form})

def initiate_commentary_ack(request):
    return render(request, 'scipost/initiate_commentary_ack.html')

@csrf_protect
def commentaries(request):
    if request.method == 'POST':
        form = CommentarySearchForm(request.POST)
        if form.is_valid() and form.has_changed():
            commentary_search_list = Commentary.objects.filter(
                pub_title__contains=form.cleaned_data['pub_title_keyword'],
                author_list__contains=form.cleaned_data['pub_author'],
                status__gte=1,
                )
            commentary_search_list.order_by('-pub_date')
        else:
#            form = CommentarySearchForm()
            commentary_search_list = [] 
           
    else:
        form = CommentarySearchForm()
        commentary_search_list = []

    commentary_recent_list = Commentary.objects.filter(latest_activity__gte=timezone.now() + datetime.timedelta(days=-7))
    context = {'form': form, 'commentary_search_list': commentary_search_list, 'commentary_recent_list': commentary_recent_list }
    return render(request, 'scipost/commentaries.html', context)

@csrf_protect
def commentary_detail(request, commentary_id):
    commentary = get_object_or_404(Commentary, pk=commentary_id)
    comments = commentary.comment_set.all()
    if request.method == 'POST':
        form = CommentForm(request.POST)
        if form.is_valid():
            newcomment = Comment (
                commentary = commentary,
                author = Contributor.objects.get(user=request.user),
                comment_text = form.cleaned_data['comment_text'],
                date_submitted = timezone.now(),
                )
            newcomment.save()
            request.session['commentary_id'] = commentary_id
            return HttpResponseRedirect(reverse('scipost:comment_submission_ack'))
    else:
        form = CommentForm()

    comment_rating_form = CommentRatingForm()
    context = {'commentary': commentary, 'comments': comments.filter(status__gte=1).order_by('date_submitted'), 'form': form, 'comment_rating_form': comment_rating_form}
    return render(request, 'scipost/commentary_detail.html', context)

def comment_submission_ack(request):
    context = {'commentary_id': request.session['commentary_id']}
    return render(request, 'scipost/comment_submission_ack.html', context)

def vote_on_comment(request, commentary_id, comment_id):
    comment = get_object_or_404(Comment, pk=comment_id)
    rater = Contributor.objects.get(user=request.user)
    if request.method == 'POST':
        form = CommentRatingForm(request.POST)
        if form.is_valid():
            if rater.id != comment.author.id:
                # Any previous rating from this contributor for this comment is deleted:
                CommentRating.objects.filter(rater=rater, comment=comment).delete()
                newrating = CommentRating (
                    comment = comment,
                    rater = Contributor.objects.get(user=request.user),
                    clarity = form.cleaned_data['clarity'],
                    correctness = form.cleaned_data['correctness'],
                    usefulness = form.cleaned_data['usefulness'],
                    )
                newrating.save()
#                comment.nr_ratings += 1
                comment.nr_ratings = CommentRating.objects.filter(comment=comment).count()
                comment.save()
                # Recalculate the ratings for this comment:
                comment.clarity_rating = CommentRating.objects.filter(comment=comment).aggregate(avg_clarity=Avg('clarity'))['avg_clarity']
                comment.correctness_rating = CommentRating.objects.filter(comment=comment).aggregate(avg_correctness=Avg('correctness'))['avg_correctness']
                comment.usefulness_rating = CommentRating.objects.filter(comment=comment).aggregate(avg_usefulness=Avg('usefulness'))['avg_usefulness']
                # Recalculate the comment_ratings for the comment's author:
                comment.save()
                comment.author.comment_clarity_rating = Comment.objects.filter(author=comment.author).aggregate(avg_clarity=Avg('clarity_rating'))['avg_clarity']
                comment.author.comment_correctness_rating = Comment.objects.filter(author=comment.author).aggregate(avg_correctness=Avg('correctness_rating'))['avg_correctness']
                comment.author.comment_usefulness_rating = Comment.objects.filter(author=comment.author).aggregate(avg_usefulness=Avg('usefulness_rating'))['avg_usefulness']
                comment.author.save()
            request.session['commentary_id'] = commentary_id
            return HttpResponseRedirect(reverse('scipost:vote_on_comment_ack'))

    commentary = Commentary(pk=commentary_id)
    comments = commentary.comment_set.all()
    form = CommentForm()
    comment_rating_form = CommentRatingForm()
    
    context = {'commentary': commentary, 'comments': comments.order_by('date_submitted'), 'form': form, 'comment_rating_form': comment_rating_form}
    return render(request, 'scipost/commentary_detail.html', context)

            
def vote_on_comment_ack(request):
    context = {'commentary_id': request.session['commentary_id']}
    return render(request, 'scipost/vote_on_comment_ack.html', context)


@csrf_protect
def vet_registration_requests(request):
    contributor = Contributor.objects.get(user=request.user)
    registration_requests_to_vet = Contributor.objects.filter(rank=0)
    form = VetRegistrationForm()
    context = {'contributor': contributor, 'registration_requests_to_vet': registration_requests_to_vet, 'form': form }
    return render(request, 'scipost/vet_registration_requests.html', context)

@csrf_protect
def vet_registration_request_ack(request, contributor_id):
    # process the form
    if request.method == 'POST':
        form = VetRegistrationForm(request.POST)
        contributor = Contributor.objects.get(pk=contributor_id)
        if form.is_valid():
            if form.cleaned_data['promote_to_rank_1']:
#            if request.POST['promote_to_rank_1']:
#            if form['promote_to_rank_1']:
                contributor.rank = 1
                contributor.save()
            else:
                #            email_text = 'Dear ' . contributor.title . ' ' . contributor.user.last_name . ', \n Your registration to the SciPost publication portal has been turned down (you can still view all the content, just not submit papers, comments or votes). We nonetheless thank you for your interest. \n\n The SciPost team.' # Syntax error here, don't see it.
                email_text = 'Dear'
            #            send_mail('SciPost registration: unauthorized', email_text, 'admin@scipost.org', [contributor.user.email, 'admin@scipost.org'], fail_silently=False) # Activate later, when scipost email is running
                contributor.rank = form.cleaned_data['refusal_reason']
                contributor.save()

    context = {}
    return render(request, 'scipost/vet_registration_request_ack.html', context)

@csrf_protect
def vet_commentary_requests(request):
    contributor = Contributor.objects.get(user=request.user)
    commentary_requests_to_vet = Commentary.objects.filter(status=0)
    form = VetCommentaryForm()
    context = {'contributor': contributor, 'commentary_requests_to_vet': commentary_requests_to_vet, 'form': form }
    return render(request, 'scipost/vet_commentary_requests.html', context)

@csrf_protect
def vet_commentary_request_ack(request, commentary_id):
    if request.method == 'POST':
        form = VetCommentaryForm(request.POST)
        commentary = Commentary.objects.get(pk=commentary_id)
        if form.is_valid():
            if form.cleaned_data['action_option'] == '1':
                # accept the commentary as is
                commentary.status = 1
                commentary.save()
            elif form.cleaned_data['action_option'] == '0':
                # re-edit the form starting from the data provided
                form2 = InitiateCommentaryForm(initial={'pub_title': commentary.pub_title, 'pub_DOI_link': commentary.pub_DOI_link, 'author_list': commentary.author_list, 'pub_date': commentary.pub_date, 'pub_abstract': commentary.pub_abstract})
                commentary.delete()
                context = {'form': form2 }
                return render(request, 'scipost/initiate_commentary.html', context)
            elif form.cleaned_data['action_option'] == '2':
                # the commentary request is simply rejected
                commentary.status = form.cleaned_data['refusal_reason']
                commentary.save()

    context = {}
    return render(request, 'scipost/vet_commentary_request_ack.html', context)


@csrf_protect
def vet_submitted_comments(request):
    contributor = Contributor.objects.get(user=request.user)
    submitted_comments_to_vet = Comment.objects.filter(status=0)
    form = VetCommentForm()
    context = {'contributor': contributor, 'submitted_comments_to_vet': submitted_comments_to_vet, 'form': form }
    return(render(request, 'scipost/vet_submitted_comments.html', context))

@csrf_protect
def vet_submitted_comment_ack(request, comment_id):
    if request.method == 'POST':
        form = VetCommentForm(request.POST)
        comment = Comment.objects.get(pk=comment_id)
        if form.is_valid():
            if form.cleaned_data['action_option'] == '1':
                # accept the comment as is
                comment.status = 1
                comment.save()
            elif form.cleaned_data['action_option'] == '2':
                # the comment request is simply rejected
                comment.status = form.cleaned_data['refusal_reason']
                comment.save()

    context = {}
    return render(request, 'scipost/vet_submitted_comment_ack.html', context)

