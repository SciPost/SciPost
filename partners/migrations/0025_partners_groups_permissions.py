# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2019-03-01 16:49
from __future__ import unicode_literals

from django.db import migrations


def delete_partner_groups(apps, schema_editor):
    Group = apps.get_model('auth', 'Group')
    try:
        PartnersAdmin = Group.objects.get(name='Partners Administrators')
        PartnersAdmin.delete()
    except Group.DoesNotExist:
        pass
    try:
        PartnersOfficers = Group.objects.get(name='Partners Officers')
        PartnersOfficers.delete()
    except Group.DoesNotExist:
        pass
    try:
        PartnersAccounts = Group.objects.get(name='Partners Accounts')
        PartnersAccounts.delete()
    except Group.DoesNotExist:
        pass


def delete_partner_permissions(apps, schema_editor):
    Permission = apps.get_model('auth', 'Permission')
    try:
        can_manage_SPB = Permission.objects.get(codename='can_manage_SPB')
        can_manage_SPB.delete()
    except Permission.DoesNotExist:
        pass
    try:
        can_email_prospartner_contact = Permission.objects.get(
            codename='can_email_prospartner_contact')
        can_email_prospartner_contact.delete()
    except Permission.DoesNotExist:
        pass
    try:
        can_read_partner_page = Permission.objects.get(
            codename='can_read_partner_page')
        can_read_partner_page.delete()
    except Permission.DoesNotExist:
        pass
    try:
        can_view_partners = Permission.objects.get(
            codename='can_view_partners')
        can_view_partners.delete()
    except Permission.DoesNotExist:
        pass
    try:
        can_view_own_partner_details = Permission.objects.get(
            codename='can_view_own_partner_details')
        can_view_own_partner_details.delete()
    except Permission.DoesNotExist:
        pass


def delete_model_permissions(apps, schema_editor):
    ContentType = apps.get_model('contenttypes.ContentType')
    Permission = apps.get_model('auth.Permission')
    for modelname in ['consortium', 'contact', 'contactperson', 'contactrequest',
                      'institution', 'membershipagreement', 'organization',
                      'partner', 'partnerevent', 'partnersattachment',
                      'prospectivecontact', 'prospectivepartner', 'prospectivepartnerevent']:
        content_type = ContentType.objects.get(
            model=modelname,
            app_label='partners',
        )
        Permission.objects.filter(
            content_type=content_type,
            codename__in=('add_' + modelname, 'change_' + modelname, 'delete_' + modelname),
        ).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('partners', '0024_auto_20190301_1638'),
    ]

    operations = [
        migrations.RunPython(delete_partner_groups,
                             reverse_code=migrations.RunPython.noop),
        migrations.RunPython(delete_partner_permissions,
                             reverse_code=migrations.RunPython.noop),
        migrations.RunPython(delete_model_permissions,
                             reverse_code=migrations.RunPython.noop),
    ]
