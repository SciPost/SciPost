# Generated by Django 5.0.12 on 2025-06-19 13:05

from django.db.models import CharField
import django.db.models.deletion
from django.db import migrations, models
from django.db.models.functions import Lower

from common.utils.db import GetElement, SplitString


def match_profiles_to_domains(apps, schema_editor):
    ProfileEmail = apps.get_model("profiles.ProfileEmail")
    MailAddressDomain = apps.get_model("mails.MailAddressDomain")

    # # Simply save the ProfileEmail objects to trigger the domain field to be set
    # for profile_email in ProfileEmail.objects.all():
    #     profile_email.save()

    ProfileEmail.objects.annotate(
        # Split string at @ and take the latter part as domain
        email_parts=SplitString("email", delimiter="@"),
        email_domain=Lower(
            GetElement("email_parts", index=2, output_field=CharField())
        ),
        matched_domain=models.Subquery(
            MailAddressDomain.objects.filter(
                domain=models.OuterRef("email_domain")
            ).values("id")[:1]
        ),
    ).update(domain_id=models.F("matched_domain"))


class Migration(migrations.Migration):
    dependencies = [
        ("mails", "0010_mailaddressdomain"),
        ("profiles", "0046_profileemail_kind"),
    ]

    operations = [
        migrations.AddField(
            model_name="profileemail",
            name="domain",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="profile_emails",
                to="mails.mailaddressdomain",
            ),
        ),
        migrations.RunPython(match_profiles_to_domains, migrations.RunPython.noop),
    ]
