# Generated by Django 3.2.18 on 2024-02-16 18:49

from django.db import migrations, models
from django.db.models import F, Q, Case, DateField, Max, OuterRef, Subquery, When
from django.db.models.functions import Coalesce


def add_checks_and_completion_dates(apps, schema_editor):
    Submission = apps.get_model("submissions", "Submission")
    SubmissionEvent = apps.get_model("submissions", "SubmissionEvent")

    # Find the last event
    last_event = (
        SubmissionEvent.objects.all()
        .filter(submission=OuterRef("pk"))
        .values("created")[:1]
    )

    # Find the last preassignment failed event
    preassignment_failed_events = SubmissionEvent.objects.filter(
        Q(submission=OuterRef("pk")),
        Q(text__icontains="failed") | Q(text__icontains="revision"),
    ).values("created")[:1]

    # Find the last EIC assignment event
    eic_assigned_events = SubmissionEvent.objects.filter(
        Q(submission=OuterRef("pk")),
        Q(text__icontains="editor"),
        Q(text__icontains="assigned"),
    ).values("created")[:1]

    # Find the last EIC assignment event on the full thread
    eic_assigned_to_predecessor_events = SubmissionEvent.objects.filter(
        Q(submission__thread_hash=OuterRef("thread_hash")),
        Q(text__icontains="editor"),
        Q(text__icontains="assigned"),
    ).values("created")[:1]

    # Find the last preassignment passed event
    preassignment_passed_events = SubmissionEvent.objects.filter(
        Q(submission=OuterRef("pk")),
        Q(text__icontains="passed"),
    ).values("created")[:1]

    # Find the last plagiarism check start event
    plagiarism_checked_events = SubmissionEvent.objects.filter(
        Q(submission=OuterRef("pk")),
        Q(text__icontains="plagiarism check"),
    ).values("created")[:1]

    # Find the last plagiarism check passed event
    plagiarism_passed_events = SubmissionEvent.objects.filter(
        Q(submission=OuterRef("pk")),
        Q(text__icontains="plagiarism"),
        Q(text__icontains="passed"),
    ).values("created")[:1]

    # Find the last author withdrawn event
    author_withdrawn_events = SubmissionEvent.objects.filter(
        Q(submission=OuterRef("pk")),
        Q(text__icontains="withdrawn"),
        Q(text__icontains="author"),
    ).values("created")[:1]

    # Annotate the submissions with the various event dates
    submissions = Submission.objects.annotate(
        last_event=Subquery(last_event),
        publication_date=Max("publications__publication_date"),
        decision_date=Max("editorialdecision__taken_on"),
        successor_submission_date=F("successor__submission_date"),
        preassignment_passed_date=Subquery(preassignment_passed_events),
        failed_date=Subquery(preassignment_failed_events),
        plagiarism_checked_date=Subquery(plagiarism_checked_events),
        plagiarism_clear_date=Subquery(plagiarism_passed_events),
        author_withdrawn_date=Subquery(author_withdrawn_events),
        eic_assigned_date=Subquery(eic_assigned_events),
        eic_assigned_in_predecessor_date=Subquery(eic_assigned_to_predecessor_events),
    )

    # Shadow the eic_assigned_date with the eic_assigned_in_predecessor_date if the former is null
    submissions = submissions.annotate(
        eic_assigned_date=Case(
            When(
                Q(eic_assigned_in_predecessor_date__isnull=False)
                & Q(eic_assigned_date__isnull=True),
                then=F("submission_date"),
            ),
            default=F("eic_assigned_date"),
        )
    )

    # Coalesce the various dates to find the checks_cleared_date and completion_date
    submissions = submissions.annotate(
        # - checks_cleared_date:
        #   - if the submission is a resubmission, it is immediately marked as cleared
        #   - if the submission is in incoming, preassignment or assignment_failed status, it is not claimed to be cleared
        #   - if the submission is withdrawn, the date is preferably set to plagiarism clear, plagiarism checked or eic assigned
        #   - otherwise, it is set to the first of plagiarism clear, plagiarism checked, preassignment passed, eic assigned
        f_checks_cleared_date=Case(
            When(Q(is_resubmission_of__isnull=False), then=F("submission_date")),
            When(
                Q(status="incoming")
                | Q(status="preassignment")
                | Q(status="assignment_failed"),
                then=None,
            ),
            When(
                Q(status="withdrawn"),
                then=Coalesce(
                    F("plagiarism_clear_date"),
                    F("plagiarism_checked_date"),
                    F("eic_assigned_date"),
                ),
            ),
            default=Coalesce(
                F("plagiarism_clear_date"),
                F("plagiarism_checked_date"),
                F("preassignment_passed_date"),
                F("eic_assigned_date"),
                output_field=DateField(),
            ),
        ),
        # - completion_date:
        #   - if the submission is withdrawn, the date is preferably set to author withdrawn or last event
        #   - if the submission is admission_failed, assignment_failed or preassignment_failed, it is set to the first of failed or last event
        #   - otherwise, it is set to the first of publication, decision, successor_submission
        f_completion_date=Case(
            When(
                Q(status="withdrawn"),
                then=Coalesce(
                    F("author_withdrawn_date"),
                    F("last_event"),
                ),
            ),
            When(
                Q(status="admission_failed")
                | Q(status="assignment_failed")
                | Q(status="preassignment_failed"),
                then=Coalesce(
                    F("failed_date"),
                    F("last_event"),
                ),
            ),
            default=Coalesce(
                F("publication_date"),
                F("successor_submission_date"),
                F("decision_date"),
                F("failed_date"),
                output_field=DateField(),
            ),
        ),
    )

    for submission in submissions:
        submission.checks_cleared_date = submission.f_checks_cleared_date
        submission.completion_date = submission.f_completion_date
        submission.eic_first_assigned_date = submission.eic_assigned_date
        submission.save()


class Migration(migrations.Migration):

    dependencies = [
        ("submissions", "0145_eicrecommendation_formulated_by"),
    ]

    operations = [
        migrations.AddField(
            model_name="submission",
            name="checks_cleared_date",
            field=models.DateTimeField(
                blank=True, null=True, verbose_name="checks cleared date"
            ),
        ),
        migrations.AddField(
            model_name="submission",
            name="completion_date",
            field=models.DateField(
                blank=True, null=True, verbose_name="completion date"
            ),
        ),
        migrations.AddField(
            model_name="submission",
            name="eic_first_assigned_date",
            field=models.DateTimeField(
                blank=True, null=True, verbose_name="EIC first assigned date"
            ),
        ),
        migrations.RunPython(
            add_checks_and_completion_dates, migrations.RunPython.noop
        ),
    ]
