# Generated by Django 5.0.12 on 2025-03-21 12:26

from django.contrib.auth.models import User
from django.db import migrations
from django.db import models
from typing import TYPE_CHECKING

from django.db.models import Q
from django.db.models.functions import Cast


def ARCs_to_AnonymousContributors(apps, schema_editor):
    """
    Migrate AnonymizedReportContributors to AnonymousContributors.
    """
    AnonymizedReportContributor = apps.get_model(
        "submissions", "AnonymizedReportContributor"
    )
    ProfileAnonymization = apps.get_model("anonymization", "ProfileAnonymization")
    ContributorAnonymization = apps.get_model(
        "anonymization", "ContributorAnonymization"
    )
    Profile = apps.get_model("profiles", "Profile")
    Contributor = apps.get_model("scipost", "Contributor")

    if TYPE_CHECKING:
        from anonymization.models import ProfileAnonymization, ContributorAnonymization
        from submissions.models.report import AnonymizedReportContributor
        from profiles.models import Profile
        from scipost.models import Contributor

    profile_anonymizations_create: list[models.Model] = []
    profile_anonymizations_update: list[models.Model] = []
    contributor_anonymizations_create: list[models.Model] = []
    contributor_anonymizations_update: list[models.Model] = []
    anonymous_profile_ids: set[int] = set()
    anonymous_contributor_ids: set[int] = set()
    for (
        uuid,
        contributor_record_exists,
        profile_record_exists,
        original_contributor_id,
        anonymized_contributor_id,
        original_profile_id,
        anonymized_profile_id,
    ) in (
        AnonymizedReportContributor.objects.annotate(
            contributor_record_exists=models.Exists(
                ContributorAnonymization.objects.filter(
                    Q(anonymous_id=models.OuterRef("anonymized_author_id"))
                    | Q(
                        uuid=Cast(
                            models.OuterRef("anonymized_author__profile__last_name"),
                            output_field=models.UUIDField(),
                        )
                    )
                )
            ),
            profile_record_exists=models.Exists(
                ProfileAnonymization.objects.filter(
                    Q(anonymous_id=models.OuterRef("anonymized_author__profile_id"))
                    | Q(
                        uuid=Cast(
                            models.OuterRef("anonymized_author__profile__last_name"),
                            output_field=models.UUIDField(),
                        )
                    )
                )
            ),
        )
        .exclude(
            anonymized_author__isnull=True,
            original_author__isnull=True,
        )
        .values_list(
            "anonymized_author__profile__last_name",
            "contributor_record_exists",
            "profile_record_exists",
            "original_author__id",
            "anonymized_author__id",
            "original_author__profile__id",
            "anonymized_author__profile__id",
        )
    ):
        anonymous_profile_ids.add(anonymized_profile_id)
        anonymous_contributor_ids.add(anonymized_contributor_id)
        profile_anonymization = ProfileAnonymization(
            uuid=uuid,
            original_id=original_profile_id,
            anonymous_id=anonymized_profile_id,
        )

        contributor_anonymization = ContributorAnonymization(
            uuid=uuid,
            original_id=original_contributor_id,
            anonymous_id=anonymized_contributor_id,
        )
        if contributor_record_exists and original_contributor_id is not None:
            contributor_anonymizations_update.append(contributor_anonymization)
        else:
            contributor_anonymizations_create.append(contributor_anonymization)

        if profile_record_exists and original_profile_id is not None:
            profile_anonymizations_update.append(profile_anonymization)
        else:
            profile_anonymizations_create.append(profile_anonymization)

    Profile.objects.filter(id__in=anonymous_profile_ids).update(is_anonymous=True)
    Contributor.objects.filter(id__in=anonymous_contributor_ids).update(
        is_anonymous=True
    )
    ProfileAnonymization.objects.bulk_create(profile_anonymizations_create)
    ProfileAnonymization.objects.bulk_update(
        profile_anonymizations_update, ["original_id"]
    )
    ContributorAnonymization.objects.bulk_create(contributor_anonymizations_create)
    ContributorAnonymization.objects.bulk_update(
        contributor_anonymizations_update, ["original_id"]
    )
    User.objects.filter(username__startswith="anonymous").delete()


def AnonymousContributors_to_ARCs(apps, schema_editor):
    """
    Migrate AnonymousContributors to AnonymizedReportContributors.
    """
    AnonymizedReportContributor = apps.get_model(
        "submissions", "AnonymizedReportContributor"
    )
    AnonymousContributor = apps.get_model("anonymization", "AnonymousContributor")
    Report = apps.get_model("submissions", "Report")

    arcs = []
    for ac in AnonymousContributor.objects.all():
        if (report := Report.objects.filter(author=ac).first()) is None:
            continue

        # Try to get the original author from the anonymization record
        # If it fails, set it to None
        original = None
        try:
            original = ac.eponymization.original
        except Exception:
            pass

        arcs.append(
            AnonymizedReportContributor(
                report=report,
                anonymized_author=ac,
                original_author=original,
            )
        )

    AnonymizedReportContributor.objects.bulk_create(arcs)


class Migration(migrations.Migration):
    dependencies = [
        ("submissions", "0168_alter_eicrecommendation_remarks_for_editorial_college"),
        ("anonymization", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(
            ARCs_to_AnonymousContributors,
            AnonymousContributors_to_ARCs,
        ),
        migrations.DeleteModel(
            name="AnonymizedReportContributor",
        ),
    ]
