# Generated by Django 5.0.12 on 2025-06-19 13:05

import django.contrib.postgres.fields
import django.db.models.deletion
from django.db import migrations, models
from django.db.models import F, Func, CharField, JSONField
from django.db.models.functions import Lower

from common.utils.db import GetElement, SplitString


def create_domains(apps, schema_editor):
    ProfileEmail = apps.get_model("profiles.ProfileEmail")
    MailAddressDomain = apps.get_model("mails.MailAddressDomain")
    Organization = apps.get_model("organizations.Organization")

    domains = (
        ProfileEmail.objects.all()
        .annotate(
            # Split string at @ and take the latter part as domain
            email_parts=SplitString("email", delimiter="@"),
            domain=Lower(GetElement("email_parts", index=2, output_field=CharField())),
        )
        .filter(domain__isnull=False)
        .values_list("domain", flat=True)
    )

    orgs_with_links = list(
        Organization.objects.annotate(
            link=Func(
                "ror_json__links",
                function="jsonb_array_elements",
                output_field=JSONField(),
            ),
            link_type=F("link__type"),
            link_value=F("link__value"),
        )
    )

    domain_matched_orgs: dict[str, int] = {}
    for domain in set(domains):
        matched_org = None
        for org in orgs_with_links:
            if org.link_type != "website":
                continue

            if org.link_value and domain in org.link_value.lower():
                if domain in domain_matched_orgs:
                    print(
                        f"Warning: Domain {domain} already matched "
                        f"to org {domain_matched_orgs[domain]}"
                    )
                else:
                    matched_org = org

                break

        domain_matched_orgs[domain] = matched_org

    MailAddressDomain.objects.bulk_create(
        [
            MailAddressDomain(
                domain=domain,
                organization=matched_org,
                kind="institutional" if matched_org else "unknown",
            )
            for domain, matched_org in domain_matched_orgs.items()
        ]
    )


class Migration(migrations.Migration):
    dependencies = [
        ("mails", "0009_maillog_bulk_recipients_maillog_sent_to_maillog_type"),
        ("organizations", "0024_contactperson_info_source"),
    ]

    operations = [
        migrations.CreateModel(
            name="MailAddressDomain",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("domain", models.CharField(max_length=128, unique=True)),
                (
                    "kind",
                    models.CharField(
                        choices=[
                            ("unknown", "Unknown"),
                            ("personal", "Personal"),
                            ("institutional", "Institutional"),
                        ],
                        default="personal",
                        max_length=16,
                    ),
                ),
                (
                    "ror_id_matches",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=128),
                        blank=True,
                        null=True,
                        size=None,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="organizations.organization",
                    ),
                ),
            ],
            options={
                "ordering": ["domain"],
            },
        ),
        migrations.RunPython(create_domains, migrations.RunPython.noop),
    ]
