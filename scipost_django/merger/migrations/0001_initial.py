# Generated by Django 5.2.5 on 2025-09-25 12:13

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("scipost", "0045_alter_totpdevice_token"),
    ]

    operations = [
        migrations.CreateModel(
            name="MergeHistoryRecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("deprecated_object_pk", models.PositiveIntegerField()),
                ("kept_object_pk", models.PositiveIntegerField()),
                ("created", models.DateTimeField(auto_now_add=True)),
                (
                    "options",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Options used during the merge operation",
                    ),
                ),
                (
                    "deprecated_snapshot",
                    models.JSONField(
                        blank=True,
                        help_text="Snapshot of the deprecated object before deletion",
                        null=True,
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "performed_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="merges_performed",
                        to="scipost.contributor",
                    ),
                ),
            ],
            options={
                "verbose_name": "Merge history record",
                "verbose_name_plural": "Merge history records",
                "ordering": ["created"],
            },
        ),
        migrations.CreateModel(
            name="NonDuplicateMark",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("object_a_pk", models.PositiveIntegerField()),
                ("object_b_pk", models.PositiveIntegerField()),
                ("created", models.DateTimeField(auto_now_add=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "marked_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="non_duplicates_marked",
                        to="scipost.contributor",
                    ),
                ),
            ],
            options={
                "verbose_name": "Non-duplicate",
                "verbose_name_plural": "Non-duplicates",
                "constraints": [
                    models.UniqueConstraint(
                        fields=("content_type", "object_a_pk", "object_b_pk"),
                        name="unique_non_duplicate_mark",
                        violation_error_message="This non-duplicate declaration already exists",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(
                            ("object_a_pk__lt", models.F("object_b_pk"))
                        ),
                        name="a_lt_b_non_duplicate_mark",
                        violation_error_message="To avoid duplicate declarations, object_a_pk must be less than object_b_pk",
                    ),
                ],
            },
        ),
    ]
