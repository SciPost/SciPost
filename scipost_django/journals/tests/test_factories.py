__copyright__ = "Copyright Â© Stichting SciPost (SciPost Foundation)"
__license__ = "AGPL v3"

from django.test import TestCase
from ..factories import (
    AutogeneratedFileContentTemplateFactory,
    DOAJDepositFactory,
    DepositFactory,
    JournalIssueFactory,
    JournalIssuePublicationFactory,
    PublicationResourceFactory,
    PublicationUpdateFactory,
    SubmissionTemplateFactory,
    VolumeIssuePublicationFactory,
    JournalFactory,
    JournalPublicationFactory,
    ReferenceFactory,
    VolumeFactory,
    VolumeIssueFactory,
)


class TestJournalFactory(TestCase):
    def test_can_create_journals(self):
        journal = JournalFactory()
        self.assertIsNotNone(journal)

    def test_default_journal_factory_has_college_specialties(self):
        journal = JournalFactory()
        college_specialties = journal.college.specialties.all()
        journal_specialties = journal.specialties.all()
        self.assertQuerysetEqual(college_specialties, journal_specialties)

    def test_can_create_scipost_phys(self):
        scipost_phys = JournalFactory.SciPostPhysics()
        self.assertEqual(scipost_phys.name, "SciPost Physics")
        self.assertEqual(scipost_phys.doi_label, "SciPostPhys")


class TestReferenceFactory(TestCase):
    def test_can_create_references(self):
        reference = ReferenceFactory()
        self.assertIsNotNone(reference)


class TestVolumeFactory(TestCase):
    def test_can_create_volumes(self):
        volume = VolumeFactory()
        self.assertIsNotNone(volume)


class TestVolumeIssueFactory(TestCase):
    def test_can_create_volume_issues(self):
        volume_issue = VolumeIssueFactory()
        self.assertIsNotNone(volume_issue)


class TestJournalIssueFactory(TestCase):
    def test_can_create_journal_issues(self):
        journal_issue = JournalIssueFactory()
        self.assertIsNotNone(journal_issue)


class TestJournalPublicationFactory(TestCase):
    def test_can_create_journal_publications(self):
        journal_publication = JournalPublicationFactory()
        self.assertIsNotNone(journal_publication)

    def test_can_create_scipostphys_publications(self):
        publication = JournalPublicationFactory(
            in_journal=JournalFactory.SciPostPhysics()
        )
        self.assertIsNotNone(publication)
        self.assertEqual(publication.in_journal.name, "SciPost Physics")


class TestVolumeIssuePublicationFactory(TestCase):
    def test_can_create_volume_issue_publications(self):
        volume_issue_publication = VolumeIssuePublicationFactory()
        self.assertIsNotNone(volume_issue_publication)


class TestJournalIssuePublicationFactory(TestCase):
    def test_can_create_journal_issue_publications(self):
        journal_issue_publication = JournalIssuePublicationFactory()
        self.assertIsNotNone(journal_issue_publication)


class TestAutogeneratedFileContentTemplateFactory(TestCase):
    def test_can_create_autogen_file_content_templates(self):
        autogen_file_content_template = AutogeneratedFileContentTemplateFactory()
        self.assertIsNotNone(autogen_file_content_template)


class TestDepositFactory(TestCase):
    def test_can_create_deposits(self):
        deposit = DepositFactory()
        self.assertIsNotNone(deposit)


class TestDOAJDepositFactory(TestCase):
    def test_can_create_doaj_deposits(self):
        doaj_deposit = DOAJDepositFactory()
        self.assertIsNotNone(doaj_deposit)


class TestPublicationResourceFactory(TestCase):
    def test_can_create_publication_resources(self):
        publication_resource = PublicationResourceFactory()
        self.assertIsNotNone(publication_resource)


class TestSubmissionTemplateFactory(TestCase):
    def test_can_create_submission_templates(self):
        submission_template = SubmissionTemplateFactory()
        self.assertIsNotNone(submission_template)


class TestPublicationUpdateFactory(TestCase):
    def test_can_create_publication_updates(self):
        publication_update = PublicationUpdateFactory()
        self.assertIsNotNone(publication_update)
