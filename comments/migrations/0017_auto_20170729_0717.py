# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2017-07-29 05:17
from __future__ import unicode_literals

from django.contrib.auth import get_user_model
from django.contrib.contenttypes.models import ContentType
from django.db import migrations

from guardian.shortcuts import assign_perm


def update_all_contenttypes(**kwargs):
    from django.apps import apps
    from django.contrib.contenttypes.management import update_contenttypes

    for app_config in apps.get_app_configs():
        update_contenttypes(app_config, **kwargs)


def create_all_permissions(**kwargs):
    from django.contrib.auth.management import create_permissions
    from django.apps import apps

    for app_config in apps.get_app_configs():
        create_permissions(app_config, **kwargs)


def forward():
    update_all_contenttypes()
    create_all_permissions()


def migrate_comments_from_generic_relations(apps, schema_editor):
    """
    Migrate all GenericRelations a Comment has to the oldschool ForeignKey relations.
    """
    return
    Comment = apps.get_model('comments', 'Comment')
    Report = apps.get_model('submissions', 'Report')
    Submission = apps.get_model('submissions', 'Submission')
    Commentary = apps.get_model('commentaries', 'Commentary')
    ThesisLink = apps.get_model('theses', 'ThesisLink')

    all_comments = Comment.objects.all()
    for comment in all_comments:
        _object = comment.content_object
        if isinstance(_object, Comment):
            comment.in_reply_to_comment = _object

            # Nested Comments have more relations
            if isinstance(_object.content_object, ThesisLink):
                comment.thesislink = _object.content_object
            elif isinstance(_object.content_object, Submission):
                comment.submission = _object.content_object
            elif isinstance(_object.content_object, Commentary):
                comment.commentary = _object.content_object
        elif isinstance(_object, Report):
            comment.in_reply_to_report = _object
            comment.submission = _object.submission
        elif isinstance(_object, ThesisLink):
            comment.thesislink = _object
        elif isinstance(_object, Submission):
            comment.submission = _object
        elif isinstance(_object, Commentary):
            comment.commentary = _object
        else:
            raise AttributeError('Comment has no relation to another valid object.')
        comment.save()
    print('\nMigrated %i comments back to oldschool ForeignKey relations.' % len(all_comments))


def migrate_comments_to_generic_relations(apps, schema_editor):
    """
    Migrate all foreignkey relations a Comment has to the new GenericRelation.
    """
    forward()
    Comment = apps.get_model('comments', 'Comment')
    User = get_user_model()

    all_comments = Comment.objects.all()
    for comment in all_comments:
        if comment.in_reply_to_comment:
            _object = comment.in_reply_to_comment
            _object_id = comment.in_reply_to_comment.id
            _object_type = ContentType.objects.get(app_label="comments", model="comment").id
        elif comment.in_reply_to_report:
            _object = comment.in_reply_to_report
            _object_id = comment.in_reply_to_report.id
            _object_type = ContentType.objects.get(app_label="submissions", model="report").id
        elif comment.thesislink:
            _object = comment.thesislink
            _object_id = comment.thesislink.id
            _object_type = ContentType.objects.get(app_label="theses", model="thesislink").id
        elif comment.submission:
            _object = comment.submission
            _object_id = comment.submission.id
            _object_type = ContentType.objects.get(app_label="submissions", model="submission").id
        elif comment.commentary:
            _object = comment.commentary
            _object_id = comment.commentary.id
            _object_type = ContentType.objects.get(app_label="commentaries", model="commentary").id
        else:
            print('\nNo valid relation for Comment: ', comment.id,)
        comment.content_object = _object
        comment.content_type_id = _object_type
        comment.object_id = _object_id
        comment.save()

        # Grant Permissions
        if comment.submission:
            user = User.objects.get(id=comment.submission.editor_in_charge.user.id)
            assign_perm('comments.can_vet_comments', user, comment)

    print('\nMigrated %i comments to GenericRelations.' % len(all_comments))


class Migration(migrations.Migration):

    dependencies = [
        ('comments', '0016_auto_20170728_1901'),
    ]

    operations = [
        migrations.RunPython(migrate_comments_to_generic_relations,
                             migrate_comments_from_generic_relations),
    ]
